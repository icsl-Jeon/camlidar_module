<launch>
<!-- first, roslaunch px4_code  lego_loam_px4.launch -->

    <arg name = "is_analyze" default = "false"/>

    <arg name="parameter_directory" default="$(find camlidar_module)/params/bluefox_vlp16_BS.yaml"/>
    <arg name="save_directory" default="/home/"/>
    <arg name="snapshot_saving_onoff" default="false"/>
    <arg name="flag_debugimage" default="true"/>
    <arg name = "base_link_fusion" default="base_link_fusion"/>
    <arg name = "rviz" default="true"/>

    <arg name="binning_on" default="false"/>
    <arg name="software_binning_on" default="true"/>
    <arg name="software_binning_level" default="1"/>
    <arg name="triggered_on" default="true"/>
    <arg name="auto_exposure_control" default="false"/>
    <arg name="auto_gain_control" default="false"/>
    <arg name="high_dynamic_range_on" default="true"/>
    <arg name="expose_us" default="15000"/>
    <arg name="frame_rate" default="10.0"/>
    <arg name = "map_align_angle" default = "0.0"/>
    <arg name = "imshow" default = "false"/>

    <!--w.r.t map -->
    <arg name = "obstMinX" value = "0"/>
    <arg name = "obstMaxX" value = "13"/>
    <arg name = "obstMinY" value = "-4"/>
    <arg name = "obstMaxY" value = "4"/>

    <!--w.r.t base_link_fusion -->
    <arg name = "obstMinZ" value = "-0.1"/>
    <arg name = "obstMaxZ" value = "1.0"/>


   <node pkg="bluefox" name="bluefox_multiple_camlidar_node" type="bluefox_multiple_camlidar_node" output="screen" unless = "$(arg is_analyze)">
        <param name="binning_on" type="bool" value="$(arg binning_on)"/>
        <param name="software_binning_on" type="bool" value="$(arg software_binning_on)"/>
        <param name="software_binning_level" type="int" value="$(arg software_binning_level)"/>
        <param name="triggered_on" type="bool" value="$(arg triggered_on)"/>
        <param name="aec_on" type="bool" value="$(arg auto_exposure_control)"/>
        <param name="agc_on" type="bool" value="$(arg auto_gain_control)"/>
        <param name="hdr_on" type="bool" value="$(arg high_dynamic_range_on)"/>
      	<param name="expose_us" type="int" value="$(arg expose_us)"/>
        <param name="frame_rate" type="double" value="$(arg frame_rate)"/>
    </node>


   <node pkg="rosserial_python" type="serial_node.py" name="arduino_UART" args="_port:=/dev/ttyACM0 _baud:=460800" output="screen" unless = "$(arg is_analyze)">
    </node>


    <!-- wall alignment for rect xy claming for obstacle tracker -->
    <node pkg="tf" type="static_transform_publisher" name="mapAlighn" args="0 0 0  0 0 $(arg map_align_angle) /map /map_wall_align     1" unless = "$(arg is_analyze)" />

<!-- our velodyne's time is different  -->
    <node pkg="tf" type="static_transform_publisher" name="toVelodyne" args="0 0 0  0.7071068 0.7071068 0 0 $(arg base_link_fusion) /velodyne  100" unless = "$(arg is_analyze)"/>


    <!-- camlidar with hsv -->
    <node pkg = "camlidar_module" type = "hsv_target_pcl_extractor" name="target_hsv_extractor" output="screen" unless = "$(arg is_analyze)">
        <param name= "map_frame" value = "/map"/>
        <param name= "baselink_id" value = "$(arg base_link_fusion)"/>
        <param name="parameter_directory" type="string" value="$(arg parameter_directory)"/>
        <param name = "imshow" value = "$(arg imshow)" />
        <param name = "flag_debugimage" value = "$(arg imshow)" />


        <!-- pose processing to handle calibration error  -->

        <param name = "toCenterRatio" value = "0.5" />
        <param name = "dbscan_eps" value = "0.1" />
        <param name = "dbscan_min_pnts" value = "5" />


<!--         <param name = "H_max" value = "$(arg H_max)" /> -->
<!--         <param name = "H_min" value = "$(arg H_min)"/> -->
<!--         <param name = "S_max" value = "$(arg S_max)" /> -->
<!--         <param name = "S_min" value = "$(arg S_min)" /> -->
<!--         <param name = "V_max" value = "$(arg V_max)" /> -->
<!--         <param name = "V_min" value = "$(arg V_min)" /> -->

    </node>

    <!-- obstacle extractor for obstacles -->
    <node name="nodelet_manager" pkg="nodelet" type="nodelet" args="manager" output="screen">
        <param name="num_worker_threads" value="20"/>

    </node>

    <node name="obstacle_extractor" pkg="nodelet" type="nodelet" args="load obstacle_detector/ObstacleExtractor nodelet_manager" output="screen">

        <remap from = "pcl" to = "/registered_cloud"/>
<!--         <remap from = "pcl" to = "/velodyne_points_original"/> -->


        <param name="active"               value="true"/>
        <param name="use_scan"             value="false"/>
        <param name="use_pcl"              value="true"/>

        <param name="use_split_and_merge"    value="false"/>
        <param name="circles_from_visibles"  value="false"/>
        <param name="discard_converted_segments" value="false"/>
        <param name="transform_coordinates"  value="true"/>

        <param name="min_group_points"     value="8"/>

        <param name="max_group_distance"   value="0.4"/>
        <param name="distance_proportion"  value="0.00"/>
        <param name="max_split_distance"   value="3"/>
        <param name="max_merge_separation" value="0.3"/>
        <param name="max_merge_spread"     value="2.0"/>
        <param name="max_circle_radius"    value="1.5"/>
        <param name="radius_enlargement"   value="0.0"/>

        <param name="min_x_limit"   value="$(arg obstMinX)"/>
        <param name="max_x_limit"   value="$(arg obstMaxX)"/>
        <param name="min_y_limit"   value="$(arg obstMinY)"/>
        <param name="max_y_limit"   value="$(arg obstMaxY)"/>
        <param name="min_z_limit"   value="$(arg obstMinZ)"/>
        <param name="max_z_limit"   value="$(arg obstMaxZ)"/>

        <param name="frame_id"             value="map"/>
    </node>

    <node name="obstacle_tracker" pkg="nodelet" type="nodelet" args="load obstacle_detector/ObstacleTracker nodelet_manager" output="screen">
        <param name="active"                  value="true"/>

        <param name="loop_rate"               value="50.0"/>
        <param name="tracking_duration"       value="200000.0"/>
        <!--should be small enough for not confused with target and obstacles and large enough to bring the redetected target back -->
        <param name="min_correspondence_cost" value="1.0"/>
        <param name="std_correspondence_dev"  value="0.15"/>
        <param name="process_variance"        value="0.00001"/>
        <param name="process_rate_variance"   value="0.0002"/>
        <param name="measurement_variance"    value="500000.2"/> <!--lock obstacles -->

        <param name="frame_id"                value="map"/>
        <remap from="/raw_obstacles" to="/target_operation/obstacle_target_removed"/>
<!--         <remap from="tracked_obstacles" to="obstacles"/> -->
    </node>


    <group ns = "targetOnly">
    <!-- obstacle extractor for obstacles -->
    <node name="nodelet_manager" pkg="nodelet" type="nodelet" args="manager" output="screen">
        <param name="num_worker_threads" value="20"/>

    </node>

    <node name="obstacle_extractor" pkg="nodelet" type="nodelet" args="load obstacle_detector/ObstacleExtractor nodelet_manager" output="screen">

        <remap from = "pcl" to = "/target_hsv_extractor/bb_queried_pnts_processed"/>
<!--         <remap from = "pcl" to = "/velodyne_points_original"/> -->


        <param name="active"               value="true"/>
        <param name="use_scan"             value="false"/>
        <param name="use_pcl"              value="true"/>

        <param name="use_split_and_merge"    value="false"/>
        <param name="circles_from_visibles"  value="false"/>
        <param name="discard_converted_segments" value="false"/>
        <param name="transform_coordinates"  value="true"/>

        <param name="min_group_points"     value="2"/>

        <param name="max_group_distance"   value="0.4"/>
        <param name="distance_proportion"  value="0.00"/>
        <param name="max_split_distance"   value="3"/>
        <param name="max_merge_separation" value="0.3"/>
        <param name="max_merge_spread"     value="2.0"/>
        <param name="max_circle_radius"    value="1.5"/>
        <param name="radius_enlargement"   value="0.0"/>

        <param name="min_x_limit"   value="$(arg obstMinX)"/>
        <param name="max_x_limit"   value="$(arg obstMaxX)"/>
        <param name="min_y_limit"   value="$(arg obstMinY)"/>
        <param name="max_y_limit"   value="$(arg obstMaxY)"/>
        <param name="min_z_limit"   value="-10"/>
        <param name="max_z_limit"   value="10"/>

        <param name="frame_id"             value="map"/>
    </node>

    <node name="obstacle_tracker" pkg="nodelet" type="nodelet" args="load obstacle_detector/ObstacleTracker nodelet_manager" output="screen">
        <param name="active"                  value="true"/>

        <param name="loop_rate"               value="50.0"/>
        <param name="tracking_duration"       value="1.0"/>
        <!--should be small enough for not confused with target and obstacles and large enough to bring the redetected target back -->
        <param name="min_correspondence_cost" value="1.0"/>
        <param name="std_correspondence_dev"  value="0.15"/>
        <param name="process_variance"        value="0.001"/>
        <param name="process_rate_variance"   value="0.0002"/>
        <param name="measurement_variance"    value="1.2"/>

        <param name="frame_id"                value="map"/>
<!--         <remap from="/raw_obstacles" to="/target_operation/obstacle_target_removed"/> -->
        <remap from="tracked_obstacles" to="target_circle"/>
    </node>


    </group>


    <node pkg="auto_chaser2" type= "real_target_state_publisher" name = "target_operation" output="screen">
        <remap from = "/target_hsv_extractor/bb_queried_pnts" to = "/target_hsv_extractor/bb_queried_pnts_processed"/>
        <remap from = "/obstacles" to= "/raw_obstacles"/>
        <param name = "world_frame_id" value= "map" />
        <param name = "sigma" value = "1.0" />
        <param name = "targetHeight" value = "-0.4" />
        <remap from = "~target_pose_cov" to = "/target_pose_cov"/>
        <param name = "min_corr_pnts" value = "2"/>
        <param name = "smoothing_weight" value = "0.9"/>
    </node>



    <node name="rviz" pkg="rviz" type="rviz" output="screen" args="-d $(find auto_chaser2)/rviz/realworldInput.rviz" if = "$(arg rviz)"/>


</launch>
